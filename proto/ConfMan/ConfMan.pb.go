// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ConfMan.proto

/*
Package ConfMan is a generated protocol buffer package.

It is generated from these files:
	ConfMan.proto

It has these top-level messages:
	ErrorMessage
	GetConfRequest
	UpdateConfRequest
	DeleteConfRequest
	DeleteConfResponse
	ConfigurationModel
*/
package ConfMan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorMessage) Reset()                    { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string            { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()               {}
func (*ErrorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ErrorMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetConfRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	HashKey     string `protobuf:"bytes,2,opt,name=HashKey" json:"HashKey,omitempty"`
}

func (m *GetConfRequest) Reset()                    { *m = GetConfRequest{} }
func (m *GetConfRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfRequest) ProtoMessage()               {}
func (*GetConfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetConfRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *GetConfRequest) GetHashKey() string {
	if m != nil {
		return m.HashKey
	}
	return ""
}

type UpdateConfRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	HashKey     string `protobuf:"bytes,2,opt,name=HashKey" json:"HashKey,omitempty"`
	HashValue   string `protobuf:"bytes,3,opt,name=HashValue" json:"HashValue,omitempty"`
}

func (m *UpdateConfRequest) Reset()                    { *m = UpdateConfRequest{} }
func (m *UpdateConfRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfRequest) ProtoMessage()               {}
func (*UpdateConfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateConfRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UpdateConfRequest) GetHashKey() string {
	if m != nil {
		return m.HashKey
	}
	return ""
}

func (m *UpdateConfRequest) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

type DeleteConfRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	HashKey     string `protobuf:"bytes,2,opt,name=HashKey" json:"HashKey,omitempty"`
}

func (m *DeleteConfRequest) Reset()                    { *m = DeleteConfRequest{} }
func (m *DeleteConfRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfRequest) ProtoMessage()               {}
func (*DeleteConfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteConfRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *DeleteConfRequest) GetHashKey() string {
	if m != nil {
		return m.HashKey
	}
	return ""
}

type DeleteConfResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *DeleteConfResponse) Reset()                    { *m = DeleteConfResponse{} }
func (m *DeleteConfResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfResponse) ProtoMessage()               {}
func (*DeleteConfResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteConfResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeleteConfResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ConfigurationModel struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	HashKey     string `protobuf:"bytes,2,opt,name=HashKey" json:"HashKey,omitempty"`
	HashValue   string `protobuf:"bytes,3,opt,name=HashValue" json:"HashValue,omitempty"`
}

func (m *ConfigurationModel) Reset()                    { *m = ConfigurationModel{} }
func (m *ConfigurationModel) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationModel) ProtoMessage()               {}
func (*ConfigurationModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigurationModel) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ConfigurationModel) GetHashKey() string {
	if m != nil {
		return m.HashKey
	}
	return ""
}

func (m *ConfigurationModel) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func init() {
	proto.RegisterType((*ErrorMessage)(nil), "ConfMan.ErrorMessage")
	proto.RegisterType((*GetConfRequest)(nil), "ConfMan.GetConfRequest")
	proto.RegisterType((*UpdateConfRequest)(nil), "ConfMan.UpdateConfRequest")
	proto.RegisterType((*DeleteConfRequest)(nil), "ConfMan.DeleteConfRequest")
	proto.RegisterType((*DeleteConfResponse)(nil), "ConfMan.DeleteConfResponse")
	proto.RegisterType((*ConfigurationModel)(nil), "ConfMan.ConfigurationModel")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfMan service

type ConfManClient interface {
	GetConf(ctx context.Context, in *GetConfRequest, opts ...grpc.CallOption) (*ConfigurationModel, error)
	UpdateConf(ctx context.Context, in *UpdateConfRequest, opts ...grpc.CallOption) (*ConfigurationModel, error)
	DeleteConf(ctx context.Context, in *DeleteConfRequest, opts ...grpc.CallOption) (*DeleteConfResponse, error)
	CreateConf(ctx context.Context, in *UpdateConfRequest, opts ...grpc.CallOption) (*ConfigurationModel, error)
}

type confManClient struct {
	cc *grpc.ClientConn
}

func NewConfManClient(cc *grpc.ClientConn) ConfManClient {
	return &confManClient{cc}
}

func (c *confManClient) GetConf(ctx context.Context, in *GetConfRequest, opts ...grpc.CallOption) (*ConfigurationModel, error) {
	out := new(ConfigurationModel)
	err := grpc.Invoke(ctx, "/ConfMan.ConfMan/GetConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confManClient) UpdateConf(ctx context.Context, in *UpdateConfRequest, opts ...grpc.CallOption) (*ConfigurationModel, error) {
	out := new(ConfigurationModel)
	err := grpc.Invoke(ctx, "/ConfMan.ConfMan/UpdateConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confManClient) DeleteConf(ctx context.Context, in *DeleteConfRequest, opts ...grpc.CallOption) (*DeleteConfResponse, error) {
	out := new(DeleteConfResponse)
	err := grpc.Invoke(ctx, "/ConfMan.ConfMan/DeleteConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confManClient) CreateConf(ctx context.Context, in *UpdateConfRequest, opts ...grpc.CallOption) (*ConfigurationModel, error) {
	out := new(ConfigurationModel)
	err := grpc.Invoke(ctx, "/ConfMan.ConfMan/CreateConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfMan service

type ConfManServer interface {
	GetConf(context.Context, *GetConfRequest) (*ConfigurationModel, error)
	UpdateConf(context.Context, *UpdateConfRequest) (*ConfigurationModel, error)
	DeleteConf(context.Context, *DeleteConfRequest) (*DeleteConfResponse, error)
	CreateConf(context.Context, *UpdateConfRequest) (*ConfigurationModel, error)
}

func RegisterConfManServer(s *grpc.Server, srv ConfManServer) {
	s.RegisterService(&_ConfMan_serviceDesc, srv)
}

func _ConfMan_GetConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfManServer).GetConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConfMan.ConfMan/GetConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfManServer).GetConf(ctx, req.(*GetConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfMan_UpdateConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfManServer).UpdateConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConfMan.ConfMan/UpdateConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfManServer).UpdateConf(ctx, req.(*UpdateConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfMan_DeleteConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfManServer).DeleteConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConfMan.ConfMan/DeleteConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfManServer).DeleteConf(ctx, req.(*DeleteConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfMan_CreateConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfManServer).CreateConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConfMan.ConfMan/CreateConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfManServer).CreateConf(ctx, req.(*UpdateConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfMan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ConfMan.ConfMan",
	HandlerType: (*ConfManServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConf",
			Handler:    _ConfMan_GetConf_Handler,
		},
		{
			MethodName: "UpdateConf",
			Handler:    _ConfMan_UpdateConf_Handler,
		},
		{
			MethodName: "DeleteConf",
			Handler:    _ConfMan_DeleteConf_Handler,
		},
		{
			MethodName: "CreateConf",
			Handler:    _ConfMan_CreateConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ConfMan.proto",
}

func init() { proto.RegisterFile("ConfMan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0xc7, 0x69, 0xd5, 0x96, 0x8e, 0x1f, 0xd0, 0x39, 0x68, 0x88, 0x82, 0x65, 0x4f, 0x3d, 0xb5,
	0xa0, 0x0f, 0xa0, 0x50, 0x83, 0x82, 0x46, 0x21, 0xa2, 0xf7, 0x6d, 0x33, 0x8d, 0x81, 0x24, 0x13,
	0x77, 0x37, 0x82, 0x4f, 0xe3, 0xab, 0x4a, 0xbe, 0x9a, 0x48, 0x0b, 0x1e, 0xac, 0xb7, 0xf9, 0xcf,
	0x4c, 0x7e, 0x19, 0xe6, 0x3f, 0x0b, 0x87, 0x33, 0x4e, 0x96, 0xae, 0x4c, 0x26, 0xa9, 0x62, 0xc3,
	0xd8, 0xaf, 0xa4, 0x7d, 0x1e, 0x30, 0x07, 0x11, 0x4d, 0x8b, 0xf4, 0x3c, 0x5b, 0x4e, 0x4d, 0x18,
	0x93, 0x36, 0x32, 0x4e, 0xcb, 0x4e, 0x31, 0x86, 0x03, 0x47, 0x29, 0x56, 0x2e, 0x69, 0x2d, 0x03,
	0x42, 0x0b, 0xfa, 0x71, 0x19, 0x5a, 0x9d, 0x51, 0x67, 0x3c, 0xf0, 0x6a, 0x29, 0x1e, 0xe0, 0xe8,
	0x96, 0x4c, 0x0e, 0xf6, 0xe8, 0x3d, 0x23, 0x6d, 0x70, 0x04, 0xfb, 0xcf, 0xa4, 0x3e, 0xc2, 0x05,
	0x3d, 0xca, 0xb8, 0xee, 0x6f, 0xa7, 0x72, 0xda, 0x9d, 0xd4, 0x6f, 0xf7, 0xf4, 0x69, 0x75, 0x4b,
	0x5a, 0x25, 0x45, 0x0c, 0xc3, 0x97, 0xd4, 0x97, 0x86, 0xb6, 0x04, 0xc4, 0x33, 0x18, 0xe4, 0xe1,
	0xab, 0x8c, 0x32, 0xb2, 0x76, 0x8a, 0x5a, 0x93, 0x10, 0x4f, 0x30, 0xbc, 0xa1, 0x88, 0xb6, 0xf6,
	0x3b, 0x71, 0x0d, 0xd8, 0x06, 0xea, 0x94, 0x13, 0x4d, 0x78, 0x0c, 0x3d, 0x6d, 0xa4, 0xc9, 0x74,
	0x05, 0xab, 0x14, 0x22, 0xec, 0x2e, 0xd8, 0xa7, 0x02, 0xb2, 0xe7, 0x15, 0xb1, 0x48, 0x00, 0xf3,
	0x6f, 0xc3, 0x20, 0x53, 0xd2, 0x84, 0x9c, 0xb8, 0xec, 0x53, 0xf4, 0x7f, 0x2b, 0xb8, 0xf8, 0xea,
	0x42, 0x7d, 0x16, 0x78, 0x05, 0xfd, 0xca, 0x4b, 0x3c, 0x99, 0xd4, 0xa7, 0xf3, 0xd3, 0x5d, 0xfb,
	0x74, 0x55, 0xd8, 0x30, 0xa6, 0x03, 0xd0, 0xd8, 0x87, 0xf6, 0xaa, 0x75, 0xcd, 0xd3, 0x5f, 0x31,
	0xcd, 0x16, 0x5b, 0x98, 0x35, 0xaf, 0x5a, 0x98, 0x0d, 0x6b, 0x77, 0x00, 0x66, 0x8a, 0xfe, 0x3a,
	0xcd, 0xbc, 0x57, 0x3c, 0x89, 0xcb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0xdf, 0x4d, 0x76,
	0x4d, 0x03, 0x00, 0x00,
}
